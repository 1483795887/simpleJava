/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options {
    STATIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(Parser)
package com.simplejava.parser;
import java.io.Reader;
import com.simplejava.ast.*;
import com.simplejava.ast.ExprNode.*;
import com.simplejava.ast.ExprNode.LiteralNode.*;
import com.simplejava.entity.*;

public class Parser{
    private String source;

    public Parser(Reader reader, String source){
        this(reader);
        this.source = source;
    }

    public Location location(Token t){return new Location(source, t);}
}

PARSER_END(Parser)

SPECIAL_TOKEN :{
  < SPACES : ([ " ", "\t", "\r", "\n" ])+ >
}

SPECIAL_TOKEN :{
  < LINE_COMMENT :
    "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r\n"
    | "\r"
    )? >
}

MORE :{
  "/*" : IN_BLOCK_COMMENT
}

< IN_BLOCK_COMMENT >
MORE :{
  < ~[ ] >
}

< IN_BLOCK_COMMENT >
SPECIAL_TOKEN :{
  "*/" : DEFAULT
}

MORE :{
    "\""  : IN_STRING
}
< IN_STRING >
MORE :{
    < (~[ "\"", "\\", "\n", "\r" ])+ >
| 	< "\\" ([ "0"-"7" ])>
| 	< "\\" ~[ ] >
}
< IN_STRING >
TOKEN :{
    < STRING : "\"" > : DEFAULT
}

MORE :{
    "'"  : IN_CHAR
}
< IN_CHAR >
MORE :{
    < ~[ "'", "\\", "\n", "\r" ] > : CHARACTER_TERM
|   < "\\" ([ "0"-"7" ])> : CHARACTER_TERM
|   < "\\" ~[ ] > : CHARACTER_TERM
}
< CHARACTER_TERM >
TOKEN :{
    < CHARACTER : "'" > : DEFAULT
}

TOKEN :{
  < INTEGER :
        ("-")?([ "1"-"9" ] ([ "0"-"9" ])*
  | 	"0" [ "x", "X" ] ([ "0"-"9", "a"-"f" ])+
  | 	"0" ([ "0"-"7" ])* )
  >
}

TOKEN : {
    <CLASS :"class">
}

TOKEN :{
  < IDENTIFIER : [ "a"-"z", "A"-"Z", "_" ] ([ "a"-"z", "A"-"Z", "_", "0"-"9" ])* >
}


ExprNode primary():{
    Token t;
    ExprNode n;
}{
        t = <INTEGER><EOF> {return IntegerLiteralNode.intLiteralNode(location(t), t.image);}
    |   t = <STRING><EOF>{return new StringLiteralNode(location(t),t.image);}
}

ClassEntity defClass():{
    Token t,name;
}{
    t = <CLASS> name=<IDENTIFIER> "{" "}"{return new ClassEntity(location(t), name.image);}
}

Declarations topDefs():{
    Declarations declarations = new Declarations();
    ClassEntity classEntity;
}{
    (
        classEntity = defClass() {declarations.addClass(classEntity);}
    )*{
        return declarations;
    }
}

AST compilationUnit():{
    Token t;
    Declarations declarations;
}{
    {
        t = getToken(1);
    }declarations = topDefs() <EOF>{
        return new AST(location(t), declarations);
    }
}