/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options {
    STATIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(Parser)
package com.simplejava.parser;
import java.io.Reader;
import java.util.List;
import java.util.ArrayList;
import com.simplejava.ast.*;
import com.simplejava.ast.ExprNode.*;
import com.simplejava.ast.ExprNode.LiteralNode.*;
import com.simplejava.entity.*;
import com.simplejava.type.*;

public class Parser{
    private String source;

    public Parser(Reader reader, String source){
        this(reader);
        this.source = source;
    }

    public Location location(Token t){return new Location(source, t);}
}

PARSER_END(Parser)

SPECIAL_TOKEN :{
  < SPACES : ([ " ", "\t", "\r", "\n" ])+ >
}

SPECIAL_TOKEN :{
  < LINE_COMMENT :
    "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r\n"
    | "\r"
    )? >
}

MORE :{
  "/*" : IN_BLOCK_COMMENT
}

< IN_BLOCK_COMMENT >
MORE :{
  < ~[ ] >
}

< IN_BLOCK_COMMENT >
SPECIAL_TOKEN :{
  "*/" : DEFAULT
}

MORE :{
    "\""  : IN_STRING
}
< IN_STRING >
MORE :{
    < (~[ "\"", "\\", "\n", "\r" ])+ >
| 	< "\\" ([ "0"-"7" ])>
| 	< "\\" ~[ ] >
}
< IN_STRING >
TOKEN :{
    < STRING : "\"" > : DEFAULT
}

MORE :{
    "'"  : IN_CHAR
}
< IN_CHAR >
MORE :{
    < ~[ "'", "\\", "\n", "\r" ] > : CHARACTER_TERM
|   < "\\" ([ "0"-"7" ])> : CHARACTER_TERM
|   < "\\" ~[ ] > : CHARACTER_TERM
}
< CHARACTER_TERM >
TOKEN :{
    < CHARACTER : "'" > : DEFAULT
}

TOKEN :{
  < INTEGER :
        ("-")?([ "1"-"9" ] ([ "0"-"9" ])*
  | 	"0" [ "x", "X" ] ([ "0"-"9", "a"-"f" ])+
  | 	"0" ([ "0"-"7" ])* )
  >
}

TOKEN : {
        <CLASS :"class">
    |   <PUBLIC :"public">
    |   <PROTECTED:"protected">
    |   <PRIVATE:"private">
    |   <CHAR :"char">
    |   <INT :"int">
    |   <SHORT: "short">
    |   <LONG:"long">
    |   <STRINGT:"string">
}

TOKEN :{
  < IDENTIFIER : [ "a"-"z", "A"-"Z", "_" ] ([ "a"-"z", "A"-"Z", "_", "0"-"9" ])* >
}

String name():{
    Token t;
}{
    t = <IDENTIFIER> {return t.image;}
}

ExprNode primary():{
    Token t;
    ExprNode n;
}{
        t = <INTEGER><EOF> {return IntegerLiteralNode.intLiteralNode(location(t), t.image);}
    |   t = <STRING><EOF>{return new StringLiteralNode(location(t),t.image);}
}

TypeRef typeBase():{}{
        <CHAR>{return BasicTypeRefs.charRef();}
    |   <SHORT>{return BasicTypeRefs.shortRef();}
    |   <INT>{return BasicTypeRefs.intRef();}
    |   <LONG>{return BasicTypeRefs.longRef();}
    |   <STRINGT>{return BasicTypeRefs.stringRef();}
}

TypeRef typeRef():{
    TypeRef typeRef;
}{
    typeRef = typeBase(){return typeRef;}
}

TypeNode type():{
    Token t;
    TypeRef typeRef;
}{
    {t = getToken(1);}
    typeRef = typeRef() {return new TypeNode(location(t), typeRef);}
}

AccessSpecifier accessSpecifier():{}{
     [
            <PUBLIC>{return AccessSpecifier.PUBLIC;}
        |   <PROTECTED>{return AccessSpecifier.PROTECTED;}
        |   <PRIVATE>{return AccessSpecifier.PRIVATE;}
     ]  {return AccessSpecifier.DEFAULT;}

}

List<Variable> defVars():{
    List<Variable> vars = new ArrayList<>();
    TypeNode typeNode;
    AccessSpecifier specifier;
    String name;
    Token t;
}{
    specifier = accessSpecifier() typeNode = type() {t = getToken(1);} name = name(){
        vars.add(new Variable(location(t), specifier, typeNode, name, null));
    } (
        "," name = name(){vars.add(new Variable(location(t), specifier, typeNode, name,null));}
    )*";"{
        return vars;
    }
}

List<Member> defMembers():{
    List<Member> members = new ArrayList<>();
    List<Variable> vars;
}{
    (vars = defVars(){members.addAll(vars);})*{return members;}
}

ClassEntity defClass():{
    Token t,name;
    AccessSpecifier accessSpecifier;
    List<Member> members;
}{
    accessSpecifier = accessSpecifier() t = <CLASS> name=<IDENTIFIER> "{"
    members = defMembers()
    "}"{
        if(accessSpecifier != AccessSpecifier.PUBLIC && accessSpecifier != AccessSpecifier.DEFAULT){
            throw new ParseException("class must be public or package-private");
        }
        return new ClassEntity(location(t), accessSpecifier, name.image, members);
    }
}

Declarations topDefs():{
    Declarations declarations = new Declarations();
    ClassEntity classEntity;
}{
    (
        classEntity = defClass() {declarations.addClass(classEntity);}
    )*{
        return declarations;
    }
}

AST compilationUnit():{
    Token t;
    Declarations declarations;
}{
    {
        t = getToken(1);
    }declarations = topDefs() <EOF>{
        return new AST(location(t), declarations);
    }
}